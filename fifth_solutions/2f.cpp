int main()
{
    // задаем массив из семи целочисленных 32-х битных знаковых чисел
    int arr[7] = { 1, 2, 3, 4, 5, 6, -1 };

    __asm
    {
        lea ebx, arr ; загружаем адресс массива в регистр EBX
        mov ecx, 0 ; инициализируем счетчик цикла в 0
        mov edx, [ebx] ; загружаем первый элемент массива как текущее минимальное значение массива
        mov edi, ebx ; загружаем адрес первого элемента массива как текущего минимального значения массива

        loop_start:
        mov eax, [ebx+ecx*4] ; загружаем текущий элемент массива с помощью индекса в регистр EAX
        cmp eax, edx ; сравниевам минимальный элемент с текущим
        jge skip ; если текущий элемент меньше минимального
        mov edx, eax ; то обновляем минимальный со значение текущего
        lea edi, [ebx+ecx*4] ; и обновляем адресс минимального значения на адресс текущего

        skip: ; если текущий элемент оказался больше или равен минимальному, то пропускаем предыдущий шаг
        inc ecx ; увеличиваем счетчик цикла на 1
        cmp ecx, 7 ; если прошло 7 итераций
        jne loop_start ; то прерываем цикл
    }
}
